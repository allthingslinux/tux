# ==============================================================================
# TUX DISCORD BOT - REUSABLE PYTHON ENVIRONMENT SETUP WORKFLOW
# ==============================================================================
#
# This reusable workflow standardizes Python environment setup across all
# workflows in the project. It provides consistent dependency management,
# caching strategies, and environment configuration while reducing duplication
# and maintenance overhead across multiple workflow files.
#
# REUSABILITY FEATURES:
# ---------------------
# 1. Flexible Python version selection with sensible defaults
# 2. Configurable Poetry dependency groups for different use cases
# 3. Customizable cache keys to prevent cache conflicts
# 4. Optional Prisma client generation for database workflows
# 5. Standardized Poetry and Python setup across all workflows
#
# PERFORMANCE OPTIMIZATIONS:
# --------------------------
# - Multi-level Poetry caching with content-based cache keys
# - Efficient dependency installation with Poetry groups
# - Parallel-safe cache key generation with custom suffixes
# - Optimized Python setup with integrated Poetry cache
#
# USAGE PATTERNS:
# ---------------
# - CI workflows: Basic linting and type checking (dev,types groups)
# - Test workflows: Full testing setup (dev,test,types groups)
# - Build workflows: Production dependencies only (main group)
# - Documentation workflows: Documentation dependencies (docs group)
#
# CACHE STRATEGY:
# ---------------
# - Primary key: poetry-{suffix}-{os}-{poetry.lock hash}
# - Fallback key: poetry-{suffix}-{os}-
# - Scope: Workflow-specific via cache-suffix parameter
# - Invalidation: Automatic on poetry.lock changes
#
# ==============================================================================
name: Setup Python Environment
# REUSABLE WORKFLOW CONFIGURATION
# Defines input parameters for flexible workflow customization
# All inputs have sensible defaults for zero-configuration usage
on:
  workflow_call:
    inputs:
      # PYTHON VERSION SELECTION
      # Allows workflows to specify Python version for compatibility testing
      # Default: Latest supported version (3.13) for best performance
      python-version:
        description: Python version to use
        required: false
        type: string
        default: '3.13'

      # POETRY DEPENDENCY GROUPS
      # Configures which Poetry groups to install for specific workflow needs
      # Examples: 'dev,types' for CI, 'dev,test,types' for testing
      install-groups:
        description: Poetry groups to install (comma-separated)
        required: false
        type: string
        default: dev,types

      # CACHE KEY DIFFERENTIATION
      # Prevents cache conflicts between different workflow types
      # Examples: 'ci', 'test', 'build' for workflow-specific caches
      cache-suffix:
        description: Cache key suffix for differentiation
        required: false
        type: string
        default: default

      # PRISMA CLIENT GENERATION
      # Controls whether to generate Prisma database client
      # Required for workflows that interact with database schemas
      generate-prisma:
        description: Whether to generate Prisma client
        required: false
        type: boolean
        default: true
jobs:
  # ============================================================================
  # PYTHON ENVIRONMENT SETUP - Standardized Configuration
  # ============================================================================
  # Purpose: Provides consistent Python and Poetry setup across workflows
  # Strategy: Optimized caching and dependency installation
  # Output: Ready-to-use Python environment with specified dependencies
  # ============================================================================
  setup:
    runs-on: ubuntu-latest
    steps:
      # POETRY INSTALLATION
      # Uses pipx for isolated Poetry installation without conflicts
      # pipx ensures Poetry doesn't interfere with project dependencies
      - name: Install Poetry
        run: pipx install poetry

      # PYTHON ENVIRONMENT SETUP
      # Configures Python with integrated Poetry cache support
      # Cache integration significantly reduces dependency resolution time
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: poetry

      # ADVANCED DEPENDENCY CACHING
      # Multi-level caching strategy for maximum cache hit rate
      # Custom suffix prevents cache conflicts between different workflows
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry    # Poetry's package cache
            ~/.cache/pip         # pip's package cache
          # PRIMARY CACHE KEY
          # Content-based key ensures cache invalidation on dependency changes
          key: poetry-${{ inputs.cache-suffix }}-${{ runner.os }}-${{ hashFiles('poetry.lock')
            }}
          # FALLBACK CACHE KEYS
          # Hierarchical fallback enables partial cache hits
          restore-keys: |
            poetry-${{ inputs.cache-suffix }}-${{ runner.os }}-

      # DEPENDENCY INSTALLATION
      # Installs specified Poetry groups with CI-optimized settings
      # --no-interaction prevents hanging in CI environment
      # --no-ansi reduces log noise for cleaner output
      - name: Install dependencies
        run: poetry install --with=${{ inputs.install-groups }} --no-interaction --no-ansi

      # CONDITIONAL PRISMA CLIENT GENERATION
      # Generates Prisma database client when needed for database operations
      # Skipped for workflows that don't require database access
      - name: Generate Prisma client
        if: ${{ inputs.generate-prisma }}
        run: poetry run prisma generate
# ==============================================================================
# REUSABLE WORKFLOW BEST PRACTICES IMPLEMENTED
# ==============================================================================
#
# 1. FLEXIBILITY & REUSABILITY:
#    - Parameterized inputs with sensible defaults
#    - Support for different dependency configurations
#    - Customizable caching strategies per workflow
#    - Optional components based on workflow needs
#
# 2. PERFORMANCE OPTIMIZATION:
#    - Multi-level caching with content-based keys
#    - Efficient Poetry setup with integrated Python cache
#    - Workflow-specific cache isolation
#    - Optimized dependency installation flags
#
# 3. MAINTAINABILITY:
#    - Centralized Python setup logic
#    - Consistent configuration across workflows
#    - Single point of maintenance for updates
#    - Clear parameter documentation
#
# 4. RELIABILITY:
#    - Robust fallback cache strategy
#    - Isolated Poetry installation via pipx
#    - CI-optimized installation flags
#    - Conditional execution for optional components
#
# USAGE EXAMPLES:
# ---------------
# Basic CI setup (default):
#   uses: ./.github/workflows/_setup-python.yml
#
# Custom Python version:
#   uses: ./.github/workflows/_setup-python.yml
#   with:
#     python-version: '3.12'
#
# Test environment setup:
#   uses: ./.github/workflows/_setup-python.yml
#   with:
#     install-groups: 'dev,test,types'
#     cache-suffix: 'test'
#
# Build environment (production only):
#   uses: ./.github/workflows/_setup-python.yml
#   with:
#     install-groups: 'main'
#     generate-prisma: false
#     cache-suffix: 'build'
#
# Documentation workflow:
#   uses: ./.github/workflows/_setup-python.yml
#   with:
#     install-groups: 'docs'
#     generate-prisma: false
#     cache-suffix: 'docs'
#
# ==============================================================================
