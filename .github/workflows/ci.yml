name: "CI"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Python linting (runs only if Python files changed)
  python:
    name: "Python"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Python changes
        uses: tj-actions/changed-files@v45.0.8
        id: python_changes
        with:
          files: |
            **/*.py
            pyproject.toml
            poetry.lock

      - name: Skip if no Python changes
        if: steps.python_changes.outputs.any_changed != 'true'
        run: |
          echo "No Python files changed, skipping Python quality checks"
          exit 0

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --with=dev,types --no-interaction --no-ansi

      - name: Generate Prisma client
        run: poetry run prisma generate

      - name: Run Ruff formatter check
        run: poetry run ruff format --check

      - name: Run Ruff linter
        run: poetry run ruff check

      - name: Run Pyright type checker
        uses: jakebailey/pyright-action@v2
        with:
          annotate: "errors"

  # Test suite
  test:
    name: "Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for Python changes
        uses: tj-actions/changed-files@v45.0.8
        id: python_changes
        with:
          files: |
            **/*.py
            pyproject.toml
            poetry.lock
            tests/**
            conftest.py

      - name: Skip if no Python/test changes
        if: steps.python_changes.outputs.any_changed != 'true'
        run: |
          echo "No Python or test files changed, skipping tests"
          exit 0

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --with=dev,test,types --no-interaction --no-ansi

      - name: Generate Prisma client
        run: poetry run prisma generate

      - name: Create test environment file
        run: |
          cat > .env << EOF
          DEV_DATABASE_URL=sqlite:///tmp/test.db
          PROD_DATABASE_URL=sqlite:///tmp/test.db
          DEV_BOT_TOKEN=test_token_for_ci
          PROD_BOT_TOKEN=test_token_for_ci
          EOF

      - name: Run unit tests with coverage
        run: poetry run pytest tests/ -v --cov=tux --cov-branch --cov-report=xml:coverage-unit.xml --cov-report=term-missing -m "not slow and not docker" --junitxml=junit-unit.xml -o junit_family=legacy --cov-fail-under=0

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          files: ./coverage-unit.xml
          flags: unit
          name: unit-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: allthingslinux/tux
          fail_ci_if_error: false

      - name: Upload unit test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          file: ./junit-unit.xml
          flags: unit
          token: ${{ secrets.CODECOV_TOKEN }}

      # Run database-specific tests with dedicated flag
      - name: Run database tests with coverage
        run: poetry run pytest tests/tux/database/ -v --cov=tux/database --cov-branch --cov-report=xml:coverage-database.xml --junitxml=junit-database.xml -o junit_family=legacy --cov-fail-under=0
        continue-on-error: true

      - name: Upload database test coverage to Codecov
        uses: codecov/codecov-action@v5
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          files: ./coverage-database.xml
          flags: database
          name: database-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: allthingslinux/tux
          fail_ci_if_error: false

      - name: Upload database test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          file: ./junit-database.xml
          flags: database
          token: ${{ secrets.CODECOV_TOKEN }}

      # Optional: Run integration tests separately (if you have them)
      - name: Run integration tests with coverage
        if: github.event_name == 'push' # Only on main branch pushes to save CI time
        run: poetry run pytest tests/ -v --cov=tux --cov-branch --cov-report=xml:coverage-integration.xml -m "slow" --junitxml=junit-integration.xml -o junit_family=legacy --cov-fail-under=0
        continue-on-error: true # Don't fail CI if integration tests fail

      - name: Upload integration test coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage-integration.xml
          flags: integration
          name: integration-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: allthingslinux/tux
          fail_ci_if_error: false

      - name: Upload integration test results to Codecov
        if: github.event_name == 'push' && !cancelled()
        uses: codecov/test-results-action@v1
        with:
          file: ./junit-integration.xml
          flags: integration
          token: ${{ secrets.CODECOV_TOKEN }}

  # Matrix strategy for file linting with inline configs
  lint:
    name: "Lint (${{ matrix.type }})"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "YAML"
            files: "**/*.yml,**/*.yaml"
          - type: "JSON"
            files: "**/*.json"
          - type: "Markdown"
            files: "**/*.md"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for ${{ matrix.type }} changes
        uses: tj-actions/changed-files@v45.0.8
        id: file_changes
        with:
          files: ${{ matrix.files }}

      - name: Skip if no ${{ matrix.type }} changes
        if: steps.file_changes.outputs.any_changed != 'true'
        run: |
          echo "No ${{ matrix.type }} files changed, skipping ${{ matrix.type }} linting"
          exit 0

      - name: Setup Node.js
        if: matrix.type != 'YAML'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python (with cache)
        if: matrix.type == 'YAML'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install linting tools
        run: |
          if [ "${{ matrix.type }}" = "YAML" ]; then
            pip install yamllint
            npm install -g prettier
          elif [ "${{ matrix.type }}" = "JSON" ]; then
            npm install -g prettier
          elif [ "${{ matrix.type }}" = "Markdown" ]; then
            npm install -g markdownlint-cli
          fi

      - name: Run YAML linting with inline config
        if: matrix.type == 'YAML'
        run: |
          # Create inline yamllint config
          cat > /tmp/yamllint.yml << 'EOF'
          extends: default
          rules:
            line-length:
              max: 120
              level: warning
            document-start: disable
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no', 'on', 'off']
          ignore: |
            .venv/
            .archive/
            node_modules/
            typings/
          EOF

          # Run yamllint with inline config
          yamllint --config-file /tmp/yamllint.yml .

          # Run prettier with inline config
          npx prettier --check \
            --tab-width 2 \
            --print-width 120 \
            --end-of-line lf \
            "**/*.{yml,yaml}" \
            --ignore-path <(echo -e ".venv/\n.archive/\nnode_modules/\ntypings/\npoetry.lock\nflake.lock")

      - name: Run JSON linting with inline config
        if: matrix.type == 'JSON'
        run: |
          npx prettier --check \
            --tab-width 2 \
            --print-width 100 \
            --end-of-line lf \
            "**/*.json" \
            --ignore-path <(echo -e ".venv/\n.archive/\nnode_modules/\ntypings/\npoetry.lock")

      - name: Run Markdown linting with inline config
        if: matrix.type == 'Markdown'
        run: |
          # Run markdownlint with inline rules
          npx markdownlint \
            --disable MD013 MD033 MD041 \
            --ignore node_modules \
            --ignore .venv \
            --ignore .archive \
            "**/*.md"

  # Infrastructure linting
  infrastructure:
    name: "Infrastructure (${{ matrix.type }})"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "Docker"
            files: "Dockerfile*,docker-compose*.yml"
          - type: "GitHub Actions"
            files: ".github/workflows/**"
          - type: "Shell Scripts"
            files: "**/*.sh,**/*.bash,scripts/**"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for ${{ matrix.type }} changes
        uses: tj-actions/changed-files@v45.0.8
        id: infra_changes
        with:
          files: ${{ matrix.files }}

      - name: Skip if no ${{ matrix.type }} changes
        if: steps.infra_changes.outputs.any_changed != 'true'
        run: |
          echo "No ${{ matrix.type }} files changed, skipping ${{ matrix.type }} linting"
          exit 0

      - name: Set up Docker Compose v2
        if: matrix.type == 'Docker'
        run: |
          # Docker Compose v2 is pre-installed on GitHub runners
          # Just verify it's available and supports the develop configuration
          docker compose version
          echo "✅ Docker Compose v2 is available"

      - name: Create .env file for Docker Compose validation
        if: matrix.type == 'Docker'
        run: |
          # Create .env file for CI validation with minimal required values
          cat > .env << EOF
          DEV_DATABASE_URL=sqlite:///tmp/test.db
          PROD_DATABASE_URL=sqlite:///tmp/test.db
          DEV_BOT_TOKEN=test_token_for_ci_validation
          PROD_BOT_TOKEN=test_token_for_ci_validation
          EOF

      - name: Run Docker linting
        if: matrix.type == 'Docker'
        run: |
          # Hadolint with inline config
          docker run --rm -i hadolint/hadolint hadolint \
            --ignore DL3008 \
            --ignore DL3009 \
            - < Dockerfile

          # Docker Compose validation (compatible with older versions)
          # Check if docker compose (v2) is available, fallback to docker-compose (v1)
          if command -v docker compose >/dev/null 2>&1; then
            echo "Using Docker Compose v2"
            docker compose -f docker-compose.yml config --quiet
            docker compose -f docker-compose.dev.yml config --quiet
          elif command -v docker-compose >/dev/null 2>&1; then
            echo "Using Docker Compose v1"
            docker-compose -f docker-compose.yml config --quiet
            docker-compose -f docker-compose.dev.yml config --quiet
          else
            echo "Neither docker compose nor docker-compose found"
            exit 1
          fi

      - name: Run GitHub Actions linting
        if: matrix.type == 'GitHub Actions'
        uses: raven-actions/actionlint@v1
        with:
          files: ".github/workflows/*.yml"

      - name: Run Shell linting
        if: matrix.type == 'Shell Scripts'
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: "./scripts"
