---
name: Maintenance
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      cleanup_images:
        description: Clean up old Docker images
        type: boolean
        default: false
      keep_amount:
        description: Number of images to keep
        required: false
        default: '10'
      remove_untagged:
        description: Remove untagged images
        type: boolean
        default: false
      manual_commit_ref:
        description: SHA to compare for TODOs
        required: false
      manual_base_ref:
        description: Optional earlier SHA for TODOs
        required: false
  schedule:
    - cron: 0 3 1 * *  # Monthly cleanup on 1st at 3 AM
    - cron: 0 2 * * 0  # Weekly cleanup on Sundays at 2 AM
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
env:
  ADMIN_PAT: ${{ secrets.ADMIN_PAT }}
jobs:
  todos:
    name: TODOs
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' &&
      github.event.inputs.manual_commit_ref)
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Convert
        uses: alstr/todo-to-issue-action@v5.1.13
        with:
          CLOSE_ISSUES: true
          INSERT_ISSUE_URLS: true
          AUTO_ASSIGN: true
          IDENTIFIERS: |
            [{"name": "TODO", "labels": ["enhancement"]}, {"name": "FIXME", "labels": ["bug"]}]
          ESCAPE: true
          IGNORE: |
            .github/,node_modules/,dist/,build/,vendor/,uv.lock
          PROJECTS_SECRET: ${{ env.ADMIN_PAT }}
        env:
          MANUAL_COMMIT_REF: ${{ github.event.inputs.manual_commit_ref }}
          MANUAL_BASE_REF: ${{ github.event.inputs.manual_base_ref }}
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch'
      && github.event.inputs.cleanup_images == 'true')
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Registry Size Check
        id: registry_size
        run: |
          echo "Checking registry size..."
          # Get package info to check size
          PACKAGE_INFO=$(gh api user/packages/container/tux 2>/dev/null || echo '{"size_in_bytes": 0}')
          SIZE_BYTES=$(echo "$PACKAGE_INFO" | jq -r '.size_in_bytes // 0')
          SIZE_GB=$(echo "scale=2; $SIZE_BYTES / 1024 / 1024 / 1024" | bc -l 2>/dev/null || echo "0")
          {
            echo "size_gb=$SIZE_GB"
            echo "size_warning=$([ "$(echo "$SIZE_GB > 5" | bc -l)" = "1" ] && echo "true" || echo "false")"
          } >> "$GITHUB_OUTPUT"
          echo "Registry size: ${SIZE_GB}GB"

          # Alert if size is too large
          if (( $(echo "$SIZE_GB > 5" | bc -l) )); then
            echo "‚ö†Ô∏è Registry size exceeds 5GB: ${SIZE_GB}GB"
          else
            echo "‚úÖ Registry size is acceptable: ${SIZE_GB}GB"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean Old Images
        uses: actions/delete-package-versions@v5
        with:
          package-name: tux
          package-type: container
          min-versions-to-keep: ${{ github.event.inputs.keep_amount || '15' }}
          delete-only-untagged-versions: ${{ github.event.inputs.remove_untagged || 'true' }}
      - name: Clean Build Cache Images
        run: |
          echo "Cleaning up build cache images..."
          # Delete build cache images older than 30 days
          gh api user/packages/container/tux/versions | \
            jq -r '.[] | select(.name | contains("buildcache")) | select(.created_at < "'"$(date -d '30 days ago' -Iseconds)"'") | .id' | \
            xargs -I {} gh api -X DELETE user/packages/container/tux/versions/{} || echo "No build cache images to clean"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Registry Cleanup Summary
        run: |
          {
            echo "## üßπ Registry Cleanup Summary"
            echo "- **Registry Size**: ${{ steps.registry_size.outputs.size_gb }}GB"
            echo "- **Cleanup Policy**: Keep 15 versions, remove untagged"
            echo "- **Build Cache**: Cleaned images older than 30 days"
            if [ "${{ steps.registry_size.outputs.size_warning }}" = "true" ]; then
              echo "- **‚ö†Ô∏è Warning**: Registry size exceeds 5GB"
            else
              echo "- **‚úÖ Status**: Registry size is acceptable"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
  health:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: read
      issues: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Repository Health Summary
        run: |
          {
            echo "## üìä Repository Health Check"
            echo "**Date**: $(date)"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Check Large Files
        run: |
          {
            echo "### üìÅ Large Files Check"
            echo "Checking for files larger than 50MB..."
          } >> "$GITHUB_STEP_SUMMARY"
          LARGE_FILES=$(find . -type f -size +50M -not -path "./.git/*" 2>/dev/null || echo "")
          if [ -n "$LARGE_FILES" ]; then
            {
              echo "‚ö†Ô∏è **Large files found:**"
              echo '```'
              echo "$LARGE_FILES"
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "‚úÖ **No large files found**" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      - name: Check Dependencies
        run: |
          {
            echo "### üì¶ Dependencies Check"
            echo "Checking for outdated dependencies..."
          } >> "$GITHUB_STEP_SUMMARY"
          if command -v uv >/dev/null 2>&1; then
            OUTDATED=$(uv outdated 2>/dev/null || echo "No outdated dependencies found")
            {
              echo '```'
              echo "$OUTDATED"
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "‚ö†Ô∏è **uv not available for dependency check**" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      - name: Check Repository Size
        run: |
          {
            echo "### üíæ Repository Size Analysis"
            REPO_SIZE=$(du -sh . 2>/dev/null | cut -f1 || echo "Unknown")
            echo "**Repository Size**: $REPO_SIZE"

            # Check .git size
            GIT_SIZE=$(du -sh .git 2>/dev/null | cut -f1 || echo "Unknown")
            echo "**Git History Size**: $GIT_SIZE"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Check Stale Branches
        run: |
          {
            echo "### üåø Branch Analysis"
            echo "**Recent branches:**"
            echo '```'
            git branch -r --sort=-committerdate | head -10 2>/dev/null || echo "Could not check branches"
            echo '```'
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Check Registry Health
        run: |
          {
            echo "### üê≥ Container Registry Health"
            if command -v gh >/dev/null 2>&1; then
              # Get package info
              PACKAGE_INFO=$(gh api user/packages/container/tux 2>/dev/null || echo '{"size_in_bytes": 0, "version_count": 0}')
              SIZE_BYTES=$(echo "$PACKAGE_INFO" | jq -r '.size_in_bytes // 0')
              VERSION_COUNT=$(echo "$PACKAGE_INFO" | jq -r '.version_count // 0')
              SIZE_GB=$(echo "scale=2; $SIZE_BYTES / 1024 / 1024 / 1024" | bc -l 2>/dev/null || echo "0")
              echo "**Registry Size**: ${SIZE_GB}GB"
              echo "**Version Count**: $VERSION_COUNT"
              if (( $(echo "$SIZE_GB > 5" | bc -l) )); then
                echo "‚ö†Ô∏è **Warning**: Registry size exceeds 5GB"
              else
                echo "‚úÖ **Status**: Registry size is acceptable"
              fi
            else
              echo "‚ö†Ô∏è **GitHub CLI not available for registry check**"
            fi
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check Recent Activity
        run: |-
          {
            echo "### üìà Recent Activity"
            echo "**Recent commits:**"
            echo '```'
            git log --oneline --since="1 week ago" | head -10 2>/dev/null || echo "Could not check recent commits"
            echo '```'
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
