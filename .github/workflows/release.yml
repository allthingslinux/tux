---
name: Release
on:
  push:
    tags: [v*]
  workflow_dispatch:
    inputs:
      version:
        description: Version to release (e.g., v1.2.3)
        required: true
        type: string
permissions:
  contents: write
  packages: write
  pull-requests: read
jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Release version: $VERSION"
          echo "Is prerelease: $([ "$VERSION" != "${VERSION/alpha/}" ] || [ "$VERSION" != "${VERSION/beta/}" ] || [ "$VERSION" != "${VERSION/rc/}" ] && echo "true" || echo "false")"
  wait:
    name: Wait for Tests
    runs-on: ubuntu-latest
    steps:
      - name: Wait
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.sha }}
          check-name: Tests (Unit Tests)
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success
  create:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, wait]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog=Initial release" >> "$GITHUB_OUTPUT"
          else
            # Generate changelog from commit messages since last tag
            CHANGELOG=$(git log "${PREVIOUS_TAG}..HEAD" --pretty=format:"- %s (%h)" --no-merges)

            # Use multiline output format for GitHub Actions
            {
              echo "changelog<<EOF"
              echo "## Changes since $PREVIOUS_TAG"
              echo ""
              echo "$CHANGELOG"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          make_latest: ${{ needs.validate.outputs.is_prerelease == 'false' }}
