name: "Docker Build & Deploy"

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0" # Weekly cleanup on Sundays

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Enable Docker build features
  DOCKER_BUILD_SUMMARY: true
  DOCKER_BUILD_CHECKS_ANNOTATIONS: true

jobs:
  # Fast validation for PRs (1-2 minutes with Git context)
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for validation (Git context)
        uses: docker/build-push-action@v6.18.0
        timeout-minutes: 15
        with:
          target: production
          push: false
          load: true
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ hashFiles('poetry.lock') }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=gha,mode=max
          tags: tux:pr-${{ github.event.number }}
          annotations: |
            org.opencontainers.image.title=Tux Discord Bot
            org.opencontainers.image.description=All Things Linux Discord Bot

      - name: Test container starts
        run: |
          # Quick smoke test - can we import the bot and basic checks?
          docker run --rm --name tux-test \
            --entrypoint python \
            tux:pr-${{ github.event.number }} \
            -c "import tux; import sqlite3; import asyncio; print('üîç Testing bot imports...'); print('‚úÖ Main bot module imports successfully'); print('‚úÖ SQLite available'); print('‚úÖ Asyncio available'); conn = sqlite3.connect(':memory:'); conn.close(); print('‚úÖ Database connectivity working'); print('üéâ All smoke tests passed!')"

  # Full build, scan, and push for main branch
  build:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Tux Discord Bot
            org.opencontainers.image.description=All Things Linux Discord Bot
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6.18.0
        timeout-minutes: 20
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ hashFiles('poetry.lock') }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ hashFiles('poetry.lock') }},mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Test pushed image
        run: |
          # Test the actual pushed image
          docker run --rm --name tux-prod-test \
            --entrypoint python \
            "$(echo '${{ steps.meta.outputs.tags }}' | head -1)" \
            -c "import tux; import sqlite3; import asyncio; print('üîç Testing production image...'); print('‚úÖ Bot imports successfully'); print('‚úÖ Dependencies available'); conn = sqlite3.connect(':memory:'); conn.close(); print('‚úÖ Database connectivity working'); print('üéâ Production image verified!')"

  # Security scanning (runs in parallel with build)
  security:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Fail on critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: "table"
          severity: "CRITICAL"
          exit-code: "1"

  # Cleanup old images (runs weekly)
  cleanup:
    if: github.event_name != 'pull_request' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Delete old container versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: "tux"
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: false
