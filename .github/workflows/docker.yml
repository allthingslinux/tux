name: Docker
on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: 0 2 15 * *
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILD_SUMMARY: true
  DOCKER_BUILD_CHECKS_ANNOTATIONS: true
  PYTHON_VERSION: '3.13'
jobs:
  validate:
    name: Validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Prepare Version
        id: version
        run: |
          VERSION="pr-${{ github.event.number }}-$(echo "${{ github.sha }}" | cut -c1-7)"
          {
            echo "version=$VERSION"
            echo "git_sha=${{ github.sha }}"
            echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          } >> "$GITHUB_OUTPUT"
      - name: Build
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          target: production
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: tux:pr-${{ github.event.number }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            GIT_SHA=${{ steps.version.outputs.git_sha }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
          annotations: |
            org.opencontainers.image.title="Tux"
            org.opencontainers.image.description="Tux - The all in one discord bot for the All Things Linux Community"
            org.opencontainers.image.source="https://github.com/allthingslinux/tux"
            org.opencontainers.image.licenses="GPL-3.0"
            org.opencontainers.image.authors="All Things Linux"
            org.opencontainers.image.vendor="All Things Linux"
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.documentation="https://github.com/allthingslinux/tux/blob/main/README.md"
      - name: Complete
        run: |
          echo "✅ Docker build validation completed successfully"
          echo "🔍 Build cache updated for faster future builds"
      - name: Scan Dockerfile
        uses: reviewdog/action-trivy@v1
        with:
          github_token: ${{ github.token }}
          trivy_command: config
          trivy_target: .
          level: warning
          reporter: github-pr-review
          tool_name: trivy-dockerfile
          filter_mode: added
          trivy_flags: --severity HIGH,CRITICAL
      - name: Scan Image
        if: always()
        uses: reviewdog/action-trivy@v1
        with:
          github_token: ${{ github.token }}
          trivy_command: image
          trivy_target: tux:pr-${{ github.event.number }}
          level: warning
          reporter: github-pr-review
          tool_name: trivy-image
          filter_mode: added
          trivy_flags: --severity HIGH,CRITICAL --format checkstyle
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs:
      - validate
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare Version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          {
            echo "version=$VERSION"
            echo "git_sha=${{ github.sha }}"
            echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          } >> "$GITHUB_OUTPUT"
      - name: Build & Push
        uses: docker/build-push-action@v6
        timeout-minutes: 15
        with:
          target: production
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            GIT_SHA=${{ steps.version.outputs.git_sha }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
          annotations: |
            org.opencontainers.image.title="Tux"
            org.opencontainers.image.description="Tux - The all in one discord bot for the All Things Linux Community"
            org.opencontainers.image.source="https://github.com/allthingslinux/tux"
            org.opencontainers.image.licenses="GPL-3.0"
            org.opencontainers.image.authors="All Things Linux"
            org.opencontainers.image.vendor="All Things Linux"
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.documentation="https://github.com/allthingslinux/tux/blob/main/README.md"
      - name: Scan Final Image
        if: always()
        uses: reviewdog/action-trivy@v1
        with:
          github_token: ${{ github.token }}
          trivy_command: image
          trivy_target: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version
            }}
          level: warning
          reporter: github-pr-review
          tool_name: trivy-final
          filter_mode: nofilter
          trivy_flags: --severity HIGH,CRITICAL --format checkstyle
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clean Old Images
        uses: actions/delete-package-versions@v5
        with:
          package-name: tux
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
