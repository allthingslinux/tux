---
name: Docker
on:
  push:
    tags: [v*]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: 0 2 15 * *
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILD_SUMMARY: true
  DOCKER_BUILD_CHECKS_ANNOTATIONS: true
  PYTHON_VERSION: '3.13'
jobs:
  changes:
    name: File Detection
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.docker_changes.outputs.any_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Docker
        uses: tj-actions/changed-files@v46
        id: docker_changes
        with:
          files: |
            Dockerfile
            docker-compose*.yml
            .dockerignore
            docker/**
  validate:
    name: Validate
    needs: [changes]
    if: (needs.changes.outputs.docker == 'true' || github.event_name == 'workflow_dispatch')
      && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: tux
          tags: |
            type=raw,value=pr-${{ github.event.number }}
          labels: |
            org.opencontainers.image.title=Tux
            org.opencontainers.image.description=Tux - The all in one discord bot for the All Things Linux Community
            org.opencontainers.image.source=https://github.com/allthingslinux/tux
            org.opencontainers.image.licenses=GPL-3.0
            org.opencontainers.image.authors=All Things Linux
            org.opencontainers.image.vendor=All Things Linux
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.documentation=https://github.com/allthingslinux/tux/blob/main/README.md
      - name: Generate PR Version
        id: pr_version
        run: |
          # Generate git describe format for PR builds to match VERSIONING.md expectations
          PR_VERSION="pr-${{ github.event.number }}-$(echo "${{ github.sha }}" | cut -c1-7)"
          echo "version=$PR_VERSION" >> "$GITHUB_OUTPUT"
          echo "Generated PR version: $PR_VERSION"
      - name: Build
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          target: production
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.pr_version.outputs.version }}
            GIT_SHA=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Complete
        run: |
          echo "✅ Docker build validation completed successfully"
          echo "🔍 Build cache updated for faster future builds"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Scan Dockerfile
        uses: reviewdog/action-trivy@v1
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          trivy_command: config
          trivy_target: ./Dockerfile
          trivy_version: v0.63.0
          level: warning
          reporter: github-pr-review
          tool_name: trivy-dockerfile
          filter_mode: added
          trivy_flags: --severity HIGH,CRITICAL
      - name: Scan Image
        if: always()
        uses: reviewdog/action-trivy@v1
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          trivy_command: image
          trivy_target: tux:pr-${{ github.event.number }}
          trivy_version: v0.63.0
          level: warning
          reporter: github-pr-review
          tool_name: trivy-image
          filter_mode: added
          trivy_flags: --severity HIGH,CRITICAL --exit-code 0
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Tux
            org.opencontainers.image.description=Tux - The all in one discord bot for the All Things Linux Community
            org.opencontainers.image.source=https://github.com/allthingslinux/tux
            org.opencontainers.image.licenses=GPL-3.0
            org.opencontainers.image.authors=All Things Linux
            org.opencontainers.image.vendor=All Things Linux
            org.opencontainers.image.documentation=https://github.com/allthingslinux/tux/blob/main/README.md
      - name: Generate Release Version
        id: release_version
        run: |
          # Generate git describe format for release builds to match VERSIONING.md expectations
          # This ensures the VERSION file contains the exact format expected by __init__.py
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          CLEAN_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          RELEASE_VERSION="$CLEAN_VERSION"
          echo "version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "Generated release version: $RELEASE_VERSION"
      - name: Build & Push
        uses: docker/build-push-action@v6
        timeout-minutes: 15
        with:
          target: production
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.release_version.outputs.version }}
            GIT_SHA=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Scan Final Image
        if: always()
        uses: reviewdog/action-trivy@v1
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          trivy_command: image
          trivy_target: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          trivy_version: v0.63.0
          level: warning
          reporter: github-pr-review
          tool_name: trivy-final
          filter_mode: nofilter
          trivy_flags: --severity HIGH,CRITICAL --exit-code 0
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clean Old Images
        uses: actions/delete-package-versions@v5
        with:
          package-name: tux
          package-type: container
          min-versions-to-keep: 15
          delete-only-untagged-versions: true
      - name: Cleanup Summary
        run: |-
          {
            echo "## 🐳 Docker Registry Cleanup"
            echo "- **Policy**: Keep 15 versions, remove untagged"
            echo "- **Schedule**: Weekly cleanup"
            echo "- **Status**: ✅ Cleanup completed"
          } >> "$GITHUB_STEP_SUMMARY"
