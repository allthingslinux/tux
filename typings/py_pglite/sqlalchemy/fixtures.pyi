"""
This type stub file was generated by pyright.
"""

import pytest
from collections.abc import Generator
from typing import Any
from sqlalchemy.engine import Engine
from sqlalchemy.orm import Session
from ..config import PGliteConfig
from .manager import SQLAlchemyPGliteManager

"""SQLAlchemy-specific pytest fixtures for PGlite integration."""
HAS_SQLMODEL = ...
logger = ...
@pytest.fixture(scope="session")
def pglite_config() -> PGliteConfig:
    """Pytest fixture providing PGlite configuration."""
    ...

@pytest.fixture(scope="session")
def pglite_sqlalchemy_manager(pglite_config: PGliteConfig) -> Generator[SQLAlchemyPGliteManager, None, None]:
    """Pytest fixture providing an SQLAlchemy-enabled PGlite manager."""
    ...

@pytest.fixture(scope="session")
def pglite_engine(pglite_sqlalchemy_manager: SQLAlchemyPGliteManager) -> Engine:
    """Pytest fixture providing a SQLAlchemy engine connected to PGlite.

    Uses the SQLAlchemy-enabled manager to ensure proper SQLAlchemy integration.
    """
    ...

@pytest.fixture(scope="session")
def pglite_sqlalchemy_engine(pglite_sqlalchemy_manager: SQLAlchemyPGliteManager) -> Engine:
    """Pytest fixture providing an optimized SQLAlchemy engine connected to PGlite."""
    ...

@pytest.fixture(scope="function")
def pglite_session(pglite_engine: Engine) -> Generator[Any, None, None]:
    """Pytest fixture providing a SQLAlchemy/SQLModel session with proper isolation.

    This fixture ensures database isolation between tests by cleaning all data
    at the start of each test.
    """
    ...

@pytest.fixture(scope="function")
def pglite_sqlalchemy_session(pglite_session: Session) -> Session:
    """Legacy fixture name for backwards compatibility."""
    ...

