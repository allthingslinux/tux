"""
This type stub file was generated by pyright.
"""

from typing import Any
from ..manager import PGliteManager

"""SQLAlchemy-specific manager for py-pglite.

Extends the core PGliteManager with SQLAlchemy-specific functionality.
"""
class SQLAlchemyPGliteManager(PGliteManager):
    """PGlite manager with SQLAlchemy-specific functionality.

    Extends the core PGliteManager with methods that require SQLAlchemy.
    Use this manager when you need SQLAlchemy integration.
    """
    def __enter__(self) -> SQLAlchemyPGliteManager:
        """Override to return correct type for type checking."""
        ...
    
    def get_engine(self, **engine_kwargs: Any) -> Any:
        """Get SQLAlchemy engine connected to PGlite.

        NOTE: This method requires SQLAlchemy to be installed.

        IMPORTANT: Returns a shared engine instance to prevent connection timeouts.
        PGlite's socket server can only handle 1 connection at a time, so multiple
        engines would cause psycopg.errors.ConnectionTimeout. The shared engine
        architecture ensures all database operations use the same connection.

        Args:
            **engine_kwargs: Additional arguments for create_engine

        Returns:
            SQLAlchemy Engine connected to PGlite (shared instance)

        Raises:
            ImportError: If SQLAlchemy is not installed
            RuntimeError: If PGlite server is not running
        """
        ...
    
    def wait_for_ready(self, max_retries: int = ..., delay: float = ...) -> bool:
        """Wait for database to be ready and responsive.

        NOTE: This method requires SQLAlchemy to be installed.

        Args:
            max_retries: Maximum number of connection attempts
            delay: Delay between attempts in seconds

        Returns:
            True if database becomes ready, False otherwise

        Raises:
            ImportError: If SQLAlchemy is not installed
        """
        ...
    
    def stop(self) -> None:
        """Stop the PGlite server with proper SQLAlchemy cleanup."""
        ...
    


__all__ = ["SQLAlchemyPGliteManager"]
