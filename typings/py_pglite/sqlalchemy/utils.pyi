"""
This type stub file was generated by pyright.
"""

from typing import Any
from sqlalchemy import MetaData
from sqlalchemy.engine import Engine
from sqlalchemy.orm import DeclarativeBase

"""SQLAlchemy utilities for py-pglite."""
HAS_SQLALCHEMY_ORM = ...
HAS_SQLMODEL = ...
__all__ = ["create_all_tables", "drop_all_tables", "get_session_class", "reflect_tables", "clear_all_data", "get_table_names", "clean_database_data", "reset_sequences", "get_table_row_counts", "verify_database_empty", "create_test_schema", "drop_test_schema", "execute_sql_file"]
def create_all_tables(engine: Engine, base: DeclarativeBase | None = ...) -> None:
    """Create all tables for the given declarative base.

    Args:
        engine: SQLAlchemy engine
        base: Declarative base class. If None and SQLModel is available, uses SQLModel.
    """
    ...

def drop_all_tables(engine: Engine, base: DeclarativeBase | None = ...) -> None:
    """Drop all tables for the given declarative base.

    Args:
        engine: SQLAlchemy engine
        base: Declarative base class. If None and SQLModel is available, uses SQLModel.
    """
    ...

def get_session_class() -> type[Any]:
    """Get the best available session class.

    Returns:
        Session class (SQLModel Session if available, otherwise SQLAlchemy Session)
    """
    ...

def reflect_tables(engine: Engine) -> MetaData:
    """Reflect existing tables from the database.

    Args:
        engine: SQLAlchemy engine

    Returns:
        MetaData object with reflected tables
    """
    ...

def clear_all_data(engine: Engine, base: DeclarativeBase | None = ...) -> None:
    """Clear all data from tables without dropping them.

    Args:
        engine: SQLAlchemy engine
        base: Declarative base class. If None and SQLModel is available, uses SQLModel.
    """
    ...

def get_table_names(engine: Engine) -> list[str]:
    """Get all table names in the database.

    Args:
        engine: SQLAlchemy engine

    Returns:
        List of table names
    """
    ...

def clean_database_data(engine: Engine, exclude_tables: list[str] | None = ...) -> None:
    """Clean all data from database tables while preserving schema.

    Args:
        engine: SQLAlchemy engine
        exclude_tables: List of table names to exclude from cleaning
    """
    ...

def reset_sequences(engine: Engine) -> None:
    """Reset all sequences to start from 1.

    Args:
        engine: SQLAlchemy engine
    """
    ...

def get_table_row_counts(engine: Engine) -> dict[str, int]:
    """Get row counts for all tables.

    Args:
        engine: SQLAlchemy engine

    Returns:
        Dictionary mapping table names to row counts
    """
    ...

def verify_database_empty(engine: Engine, exclude_tables: list[str] | None = ...) -> bool:
    """Verify that database tables are empty.

    Args:
        engine: SQLAlchemy engine
        exclude_tables: List of table names to exclude from check

    Returns:
        True if all tables are empty, False otherwise
    """
    ...

def create_test_schema(engine: Engine, schema_name: str = ...) -> None:
    """Create a test schema for isolated testing.

    Args:
        engine: SQLAlchemy engine
        schema_name: Name of schema to create
    """
    ...

def drop_test_schema(engine: Engine, schema_name: str = ...) -> None:
    """Drop a test schema.

    Args:
        engine: SQLAlchemy engine
        schema_name: Name of schema to drop
    """
    ...

def execute_sql_file(engine: Engine, file_path: str) -> None:
    """Execute SQL commands from a file.

    Args:
        engine: SQLAlchemy engine
        file_path: Path to SQL file
    """
    ...

