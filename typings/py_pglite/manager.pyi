"""
This type stub file was generated by pyright.
"""

from typing import Any
from .config import PGliteConfig

"""Core PGlite process management."""
class PGliteManager:
    """Manages PGlite process lifecycle for testing.

    Framework-agnostic PGlite process manager. Provides database connections
    through framework-specific methods that require their respective dependencies.
    """
    def __init__(self, config: PGliteConfig | None = ...) -> None:
        """Initialize PGlite manager.

        Args:
            config: Configuration for PGlite. If None, uses defaults.
        """
        ...
    
    def __enter__(self) -> PGliteManager:
        """Context manager entry."""
        ...
    
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        """Context manager exit."""
        ...
    
    def start(self) -> None:
        """Start the PGlite server."""
        ...
    
    def stop(self) -> None:
        """Stop the PGlite server."""
        ...
    
    def is_running(self) -> bool:
        """Check if PGlite process is running."""
        ...
    
    def get_connection_string(self) -> str:
        """Get the database connection string for framework-agnostic usage.

        Returns:
            PostgreSQL connection string

        Raises:
            RuntimeError: If PGlite server is not running
        """
        ...
    
    def get_dsn(self) -> str:
        """Get the database DSN string for framework-agnostic usage.

        Returns:
            PostgreSQL DSN string
        """
        ...
    
    def wait_for_ready_basic(self, max_retries: int = ..., delay: float = ...) -> bool:
        """Wait for database to be ready using framework-agnostic connection test.

        Args:
            max_retries: Maximum number of connection attempts
            delay: Delay between attempts in seconds

        Returns:
            True if database becomes ready, False otherwise
        """
        ...
    
    def wait_for_ready(self, max_retries: int = ..., delay: float = ...) -> bool:
        """Wait for database to be ready (framework-agnostic).

        This is an alias for wait_for_ready_basic() to maintain API consistency
        across different manager types while keeping the base manager framework-agnostic.

        Args:
            max_retries: Maximum number of connection attempts
            delay: Delay between attempts in seconds

        Returns:
            True if database becomes ready, False otherwise
        """
        ...
    
    def restart(self) -> None:
        """Restart the PGlite server.

        Stops the current server if running and starts a new one.
        """
        ...
    
    def get_psycopg_uri(self) -> str:
        """Get the database URI for psycopg usage.

        Returns:
            PostgreSQL URI string compatible with psycopg

        Raises:
            RuntimeError: If PGlite server is not running
        """
        ...
    


