"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from pathlib import Path

"""Configuration for PGlite testing."""
@dataclass
class PGliteConfig:
    """Configuration for PGlite test database.

    Args:
        timeout: Timeout in seconds for PGlite startup (default: 30)
        cleanup_on_exit: Whether to cleanup socket/process on exit (default: True)
        log_level: Logging level for PGlite operations (default: "INFO")
        socket_path: Custom socket path (default: secure temp directory)
        work_dir: Working directory for PGlite files (default: None, uses temp)
        node_modules_check: Whether to verify node_modules exists (default: True)
        auto_install_deps: Whether to auto-install npm dependencies (default: True)
        extensions: List of PGlite extensions to enable (e.g., ["pgvector"])
        node_options: Custom NODE_OPTIONS for the Node.js process
    """
    timeout: int = ...
    cleanup_on_exit: bool = ...
    log_level: str = ...
    socket_path: str = ...
    work_dir: Path | None = ...
    node_modules_check: bool = ...
    auto_install_deps: bool = ...
    extensions: list[str] | None = ...
    node_options: str | None = ...
    def __post_init__(self) -> None:
        """Validate configuration after initialization."""
        ...
    
    @property
    def log_level_int(self) -> int:
        """Get logging level as integer."""
        ...
    
    def get_connection_string(self) -> str:
        """Get PostgreSQL connection string for SQLAlchemy usage."""
        ...
    
    def get_psycopg_uri(self) -> str:
        """Get PostgreSQL URI for direct psycopg usage."""
        ...
    
    def get_dsn(self) -> str:
        """Get PostgreSQL DSN connection string for direct psycopg usage."""
        ...
    


