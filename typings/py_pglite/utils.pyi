"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any
from .clients import DatabaseClient

"""Framework-agnostic utility functions for PGlite testing."""
logger = ...
def get_connection_from_string(connection_string: str, client: DatabaseClient | None = ...) -> Any:
    """Get a raw database connection from connection string.

    Args:
        connection_string: PostgreSQL connection string
        client: Database client to use (defaults to auto-detected)

    Returns:
        Database connection object
    """
    ...

def check_connection(connection_string: str, client: DatabaseClient | None = ...) -> bool:
    """Test if database connection is working.

    Args:
        connection_string: PostgreSQL connection string (DSN format preferred)
        client: Database client to use (defaults to auto-detected)

    Returns:
        True if connection successful, False otherwise
    """
    ...

test_connection = ...
def get_database_version(connection_string: str, client: DatabaseClient | None = ...) -> str | None:
    """Get PostgreSQL version string.

    Args:
        connection_string: PostgreSQL connection string
        client: Database client to use (defaults to auto-detected)

    Returns:
        Version string or None if failed
    """
    ...

def get_table_names(connection_string: str, schema: str = ..., client: DatabaseClient | None = ...) -> list[str]:
    """Get list of table names in a schema.

    Args:
        connection_string: PostgreSQL connection string
        schema: Schema name (default: public)
        client: Database client to use (defaults to auto-detected)

    Returns:
        List of table names
    """
    ...

def table_exists(connection_string: str, table_name: str, schema: str = ..., client: DatabaseClient | None = ...) -> bool:
    """Check if a table exists in the database.

    Args:
        connection_string: PostgreSQL connection string
        table_name: Name of table to check
        schema: Schema name (default: public)
        client: Database client to use (defaults to auto-detected)

    Returns:
        True if table exists, False otherwise
    """
    ...

def execute_sql(connection_string: str, query: str, params: Any | None = ..., client: DatabaseClient | None = ...) -> list[tuple] | None:
    """Execute SQL and return results.

    Args:
        connection_string: PostgreSQL connection string
        query: SQL query to execute
        params: Query parameters (optional)
        client: Database client to use (defaults to auto-detected)

    Returns:
        List of result tuples, or None if failed
    """
    ...

def get_major_version(version: str) -> int:
    """Get the major version number from a version string."""
    ...

def find_pglite_modules(start_path: Path) -> Path | None:
    """Find the node_modules directory containing @electric-sql/pglite."""
    ...

