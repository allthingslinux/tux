"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any

"""Database client abstraction for py-pglite.

Provides unified interface for both psycopg and asyncpg clients,
allowing users to choose their preferred PostgreSQL driver.
"""
logger = ...
class DatabaseClient(ABC):
    """Abstract database client interface."""
    @abstractmethod
    def connect(self, connection_string: str) -> Any:
        """Create a connection to the database."""
        ...
    
    @abstractmethod
    def execute_query(self, connection: Any, query: str, params: Any = ...) -> list[tuple]:
        """Execute a query and return results."""
        ...
    
    @abstractmethod
    def test_connection(self, connection_string: str) -> bool:
        """Test if database connection is working."""
        ...
    
    @abstractmethod
    def get_database_version(self, connection_string: str) -> str | None:
        """Get PostgreSQL version string."""
        ...
    
    @abstractmethod
    def close_connection(self, connection: Any) -> None:
        """Close a database connection."""
        ...
    


class PsycopgClient(DatabaseClient):
    """psycopg-based database client."""
    def __init__(self) -> None:
        ...
    
    def connect(self, connection_string: str) -> Any:
        """Create a psycopg connection."""
        ...
    
    def execute_query(self, connection: Any, query: str, params: Any = ...) -> list[tuple]:
        """Execute query using psycopg."""
        ...
    
    def test_connection(self, connection_string: str) -> bool:
        """Test psycopg connection."""
        ...
    
    def get_database_version(self, connection_string: str) -> str | None:
        """Get PostgreSQL version using psycopg."""
        ...
    
    def close_connection(self, connection: Any) -> None:
        """Close psycopg connection."""
        ...
    


class AsyncpgClient(DatabaseClient):
    """asyncpg-based database client."""
    def __init__(self) -> None:
        ...
    
    def connect(self, connection_string: str) -> Any:
        """Create an asyncpg connection (sync wrapper)."""
        ...
    
    def execute_query(self, connection: Any, query: str, params: Any = ...) -> list[tuple]:
        """Execute query using asyncpg (sync wrapper)."""
        ...
    
    def test_connection(self, connection_string: str) -> bool:
        """Test asyncpg connection."""
        ...
    
    def get_database_version(self, connection_string: str) -> str | None:
        """Get PostgreSQL version using asyncpg."""
        ...
    
    def close_connection(self, connection: Any) -> None:
        """Close asyncpg connection."""
        ...
    


def get_default_client() -> DatabaseClient:
    """Get the default database client.

    Prefers psycopg if available, falls back to asyncpg.
    """
    ...

def get_client(client_type: str = ...) -> DatabaseClient:
    """Get a database client by type.

    Args:
        client_type: "psycopg", "asyncpg", or "auto" (default)

    Returns:
        DatabaseClient instance
    """
    ...

__all__ = ["DatabaseClient", "PsycopgClient", "AsyncpgClient", "get_default_client", "get_client"]
