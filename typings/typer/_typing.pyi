"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, Optional, Tuple, Type

if sys.version_info >= (3, 9):
    ...
else:
    ...
if sys.version_info < (3, 10):
    ...
else:
    def is_union(tp: Optional[Type[Any]]) -> bool:
        ...
    
__all__ = ("NoneType", "is_none_type", "is_callable_type", "is_literal_type", "all_literal_values", "is_union", "Annotated", "Literal", "get_args", "get_origin", "get_type_hints")
NoneType = None.__class__
NONE_TYPES: Tuple[Any, Any, Any] = ...
if sys.version_info < (3, 8):
    ...
else:
    def is_none_type(type_: Any) -> bool:
        ...
    
    def is_none_type(type_: Any) -> bool:
        ...
    
def is_callable_type(type_: Type[Any]) -> bool:
    ...

def is_literal_type(type_: Type[Any]) -> bool:
    ...

def literal_values(type_: Type[Any]) -> Tuple[Any, ...]:
    ...

def all_literal_values(type_: Type[Any]) -> Tuple[Any, ...]:
    """
    This method is used to retrieve all Literal values as
    Literal can be used recursively (see https://www.python.org/dev/peps/pep-0586)
    e.g. `Literal[Literal[Literal[1, 2, 3], "foo"], 5, None]`
    """
    ...

