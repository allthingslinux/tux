"""
This type stub file was generated by pyright.
"""

import sys
import click
from typing import List, Literal, Optional, Union
from rich.highlighter import RegexHighlighter
from rich.traceback import Traceback
from typer.models import DeveloperExceptionConfig

if sys.version_info >= (3, 9):
    ...
else:
    ...
STYLE_OPTION = ...
STYLE_SWITCH = ...
STYLE_NEGATIVE_OPTION = ...
STYLE_NEGATIVE_SWITCH = ...
STYLE_METAVAR = ...
STYLE_METAVAR_SEPARATOR = ...
STYLE_USAGE = ...
STYLE_USAGE_COMMAND = ...
STYLE_DEPRECATED = ...
STYLE_DEPRECATED_COMMAND = ...
STYLE_HELPTEXT_FIRST_LINE = ...
STYLE_HELPTEXT = ...
STYLE_OPTION_HELP = ...
STYLE_OPTION_DEFAULT = ...
STYLE_OPTION_ENVVAR = ...
STYLE_REQUIRED_SHORT = ...
STYLE_REQUIRED_LONG = ...
STYLE_OPTIONS_PANEL_BORDER = ...
ALIGN_OPTIONS_PANEL: Literal["left", "center", "right"] = ...
STYLE_OPTIONS_TABLE_SHOW_LINES = ...
STYLE_OPTIONS_TABLE_LEADING = ...
STYLE_OPTIONS_TABLE_PAD_EDGE = ...
STYLE_OPTIONS_TABLE_PADDING = ...
STYLE_OPTIONS_TABLE_BOX = ...
STYLE_OPTIONS_TABLE_ROW_STYLES = ...
STYLE_OPTIONS_TABLE_BORDER_STYLE = ...
STYLE_COMMANDS_PANEL_BORDER = ...
ALIGN_COMMANDS_PANEL: Literal["left", "center", "right"] = ...
STYLE_COMMANDS_TABLE_SHOW_LINES = ...
STYLE_COMMANDS_TABLE_LEADING = ...
STYLE_COMMANDS_TABLE_PAD_EDGE = ...
STYLE_COMMANDS_TABLE_PADDING = ...
STYLE_COMMANDS_TABLE_BOX = ...
STYLE_COMMANDS_TABLE_ROW_STYLES = ...
STYLE_COMMANDS_TABLE_BORDER_STYLE = ...
STYLE_COMMANDS_TABLE_FIRST_COLUMN = ...
STYLE_ERRORS_PANEL_BORDER = ...
ALIGN_ERRORS_PANEL: Literal["left", "center", "right"] = ...
STYLE_ERRORS_SUGGESTION = ...
STYLE_ABORTED = ...
_TERMINAL_WIDTH = ...
MAX_WIDTH = ...
COLOR_SYSTEM: Optional[Literal["auto", "standard", "256", "truecolor", "windows"]] = ...
_TYPER_FORCE_DISABLE_TERMINAL = ...
FORCE_TERMINAL = ...
if _TYPER_FORCE_DISABLE_TERMINAL:
    FORCE_TERMINAL = ...
DEPRECATED_STRING = ...
DEFAULT_STRING = ...
ENVVAR_STRING = ...
REQUIRED_SHORT_STRING = ...
REQUIRED_LONG_STRING = ...
RANGE_STRING = ...
ARGUMENTS_PANEL_TITLE = ...
OPTIONS_PANEL_TITLE = ...
COMMANDS_PANEL_TITLE = ...
ERRORS_PANEL_TITLE = ...
ABORTED_TEXT = ...
RICH_HELP = ...
MARKUP_MODE_MARKDOWN = ...
MARKUP_MODE_RICH = ...
_RICH_HELP_PANEL_NAME = ...
MarkupMode = Literal["markdown", "rich", None]
class OptionHighlighter(RegexHighlighter):
    """Highlights our special options."""
    highlights = ...


class NegativeOptionHighlighter(RegexHighlighter):
    highlights = ...


highlighter = ...
negative_highlighter = ...
def rich_format_help(*, obj: Union[click.Command, click.Group], ctx: click.Context, markup_mode: MarkupMode) -> None:
    """Print nicely formatted help text using rich.

    Based on original code from rich-cli, by @willmcgugan.
    https://github.com/Textualize/rich-cli/blob/8a2767c7a340715fc6fbf4930ace717b9b2fc5e5/src/rich_cli/__main__.py#L162-L236

    Replacement for the click function format_help().
    Takes a command or group and builds the help text output.
    """
    ...

def rich_format_error(self: click.ClickException) -> None:
    """Print richly formatted click errors.

    Called by custom exception handler to print richly formatted click errors.
    Mimics original click.ClickException.echo() function but with rich formatting.
    """
    ...

def rich_abort_error() -> None:
    """Print richly formatted abort error."""
    ...

def escape_before_html_export(input_text: str) -> str:
    """Ensure that the input string can be used for HTML export."""
    ...

def rich_to_html(input_text: str) -> str:
    """Print the HTML version of a rich-formatted input string.

    This function does not provide a full HTML page, but can be used to insert
    HTML-formatted text spans into a markdown file.
    """
    ...

def rich_render_text(text: str) -> str:
    """Remove rich tags and render a pure text representation"""
    ...

def get_traceback(exc: BaseException, exception_config: DeveloperExceptionConfig, internal_dir_names: List[str]) -> Traceback:
    ...

