"""
This type stub file was generated by pyright.
"""

import click
import typer
import typer.core
from pathlib import Path
from typing import Any, List, Optional
from click import Command, Group, Option

has_rich = ...
default_app_names = ...
default_func_names = ...
app = ...
utils_app = ...
class State:
    def __init__(self) -> None:
        ...
    


state = ...
def maybe_update_state(ctx: click.Context) -> None:
    ...

class TyperCLIGroup(typer.core.TyperGroup):
    def list_commands(self, ctx: click.Context) -> List[str]:
        ...
    
    def get_command(self, ctx: click.Context, name: str) -> Optional[Command]:
        ...
    
    def invoke(self, ctx: click.Context) -> Any:
        ...
    
    def maybe_add_run(self, ctx: click.Context) -> None:
        ...
    


def get_typer_from_module(module: Any) -> Optional[typer.Typer]:
    ...

def get_typer_from_state() -> Optional[typer.Typer]:
    ...

def maybe_add_run_to_cli(cli: click.Group) -> None:
    ...

def print_version(ctx: click.Context, param: Option, value: bool) -> None:
    ...

@app.callback(cls=TyperCLIGroup, no_args_is_help=True)
def callback(ctx: typer.Context, *, path_or_module: str = ..., app: str = ..., func: str = ..., version: bool = ...) -> None:
    """
    Run Typer scripts with completion, without having to create a package.

    You probably want to install completion for the typer command:

    $ typer --install-completion

    https://typer.tiangolo.com/
    """
    ...

def get_docs_for_click(*, obj: Command, ctx: typer.Context, indent: int = ..., name: str = ..., call_prefix: str = ..., title: Optional[str] = ...) -> str:
    ...

@utils_app.command()
def docs(ctx: typer.Context, name: str = ..., output: Optional[Path] = ..., title: Optional[str] = ...) -> None:
    """
    Generate Markdown docs for a Typer app.
    """
    ...

def main() -> Any:
    ...

