"""
This type stub file was generated by pyright.
"""

import click
import click.core
import click.shell_completion
import click.types
from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union
from ._typing import Literal

MarkupMode = Literal["markdown", "rich", None]
DEFAULT_MARKUP_MODE: MarkupMode = ...
class TyperArgument(click.core.Argument):
    def __init__(self, *, param_decls: List[str], type: Optional[Any] = ..., required: Optional[bool] = ..., default: Optional[Any] = ..., callback: Optional[Callable[..., Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., shell_complete: Optional[Callable[[click.Context, click.Parameter, str], Union[List[click.shell_completion.CompletionItem], List[str]],]] = ..., autocompletion: Optional[Callable[..., Any]] = ..., show_default: Union[bool, str] = ..., show_choices: bool = ..., show_envvar: bool = ..., help: Optional[str] = ..., hidden: bool = ..., rich_help_panel: Union[str, None] = ...) -> None:
        ...
    
    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:
        ...
    
    def make_metavar(self, ctx: Union[click.Context, None] = ...) -> str:
        ...
    


class TyperOption(click.core.Option):
    def __init__(self, *, param_decls: List[str], type: Optional[Union[click.types.ParamType, Any]] = ..., required: Optional[bool] = ..., default: Optional[Any] = ..., callback: Optional[Callable[..., Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., shell_complete: Optional[Callable[[click.Context, click.Parameter, str], Union[List[click.shell_completion.CompletionItem], List[str]],]] = ..., autocompletion: Optional[Callable[..., Any]] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: Union[bool, str] = ..., prompt_required: bool = ..., hide_input: bool = ..., is_flag: Optional[bool] = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., help: Optional[str] = ..., hidden: bool = ..., show_choices: bool = ..., show_envvar: bool = ..., rich_help_panel: Union[str, None] = ...) -> None:
        ...
    
    def make_metavar(self, ctx: Union[click.Context, None] = ...) -> str:
        ...
    
    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:
        ...
    


class TyperCommand(click.core.Command):
    def __init__(self, name: Optional[str], *, context_settings: Optional[Dict[str, Any]] = ..., callback: Optional[Callable[..., Any]] = ..., params: Optional[List[click.Parameter]] = ..., help: Optional[str] = ..., epilog: Optional[str] = ..., short_help: Optional[str] = ..., options_metavar: Optional[str] = ..., add_help_option: bool = ..., no_args_is_help: bool = ..., hidden: bool = ..., deprecated: bool = ..., rich_markup_mode: MarkupMode = ..., rich_help_panel: Union[str, None] = ...) -> None:
        ...
    
    def format_options(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:
        ...
    
    def main(self, args: Optional[Sequence[str]] = ..., prog_name: Optional[str] = ..., complete_var: Optional[str] = ..., standalone_mode: bool = ..., windows_expand_args: bool = ..., **extra: Any) -> Any:
        ...
    
    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:
        ...
    


class TyperGroup(click.core.Group):
    def __init__(self, *, name: Optional[str] = ..., commands: Optional[Union[Dict[str, click.Command], Sequence[click.Command]]] = ..., rich_markup_mode: MarkupMode = ..., rich_help_panel: Union[str, None] = ..., **attrs: Any) -> None:
        ...
    
    def format_options(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:
        ...
    
    def main(self, args: Optional[Sequence[str]] = ..., prog_name: Optional[str] = ..., complete_var: Optional[str] = ..., standalone_mode: bool = ..., windows_expand_args: bool = ..., **extra: Any) -> Any:
        ...
    
    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:
        ...
    
    def list_commands(self, ctx: click.Context) -> List[str]:
        """Returns a list of subcommand names.
        Note that in Click's Group class, these are sorted.
        In Typer, we wish to maintain the original order of creation (cf Issue #933)"""
        ...
    


