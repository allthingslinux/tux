[project]
name = "tux"
version = "0.0.0"
description = "Tux is an all in one bot for the All Things Linux discord server."
authors = [{ name = "All Things Linux", email = "tux@allthingslinux.org" }]
requires-python = ">=3.13.2,<3.14"
readme = "README.md"
dependencies = [
    "aiocache>=0.12.2",
    "aioconsole>=0.8.0",
    "aiofiles>=24.1.0",
    "asynctempfile>=0.5.0",
    "cairosvg>=2.7.1",
    "dateparser>=1.2.0",
    "discord-py>=2.4.0",
    "influxdb-client>=1.48.0",
    "emojis>=0.7.0",
    "githubkit[auth-app]>=0.12.0",
    "httpx>=0.28.0",
    "jishaku>=2.5.2",
    "loguru>=0.7.2",
    "pillow>=11.3.0,<11.4.0",
    "prisma>=0.15.0",
    "psutil>=6.0.0",
    "pynacl>=1.5.0",
    "python-dotenv>=1.0.1",
    "pytz>=2024.1",
    "pyyaml>=6.0.2",
    "reactionmenu>=3.1.7",
    "rsa>=4.9",
    "sentry-sdk[httpx, loguru]>=2.7.0",
    "audioop-lts>=0.2.1,<0.3",
    "colorama>=0.4.6,<0.5",
    "rich>=14.0.0,<15",
    "watchdog>=6.0.0,<7",
    "arrow>=1.3.0,<2",
    "click>=8.1.8,<9",
    "levenshtein>=0.27.1,<0.28",
    "jinja2>=3.1.6,<4",
]

[project.urls]
repository = "https://github.com/allthingslinux/tux"

[project.scripts]
tux = "tux.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pre-commit==4.2.0",
    "pyright==1.1.403",
    "ruff==0.12.4",
    "yamllint==1.37.1",
    "yamlfix==1.17.0",
]
test = [
    "pytest>=8.0.0,<9",
    "pytest-asyncio>=1.0.0,<2",
    "pytest-mock>=3.14.0,<4",
    "pytest-cov>=6.0.0,<7",
    "pytest-sugar>=1.0.0,<2",
    "pytest-xdist>=3.6.0,<4",
    "pytest-randomly>=3.15.0,<4",
    "pytest-timeout>=2.3.1,<3",
    "pytest-html>=4.1.1,<5",
    "pytest-benchmark>=5.1.0,<6",
]
docs = [
    "mkdocs-material>=9.5.30,<10",
    "mkdocstrings-python>=1.14.3,<2",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0,<2",
    "mkdocs-git-committers-plugin-2>=2.5.0,<3",
    "pymdown-extensions>=10.14.3,<11",
    "mkdocstrings>=0.29.0,<0.30",
    "mkdocs>=1.6.1,<2",
    "griffe>=1.5.6,<2",
    "griffe-typingdoc>=0.2.7,<0.3",
    "griffe-generics>=1.0.13,<2",
    "griffe-inherited-method-crossrefs>=0.0.1.4,<0.1",
    "griffe-inherited-docstrings>=1.1.1,<2",
    "mkdocs-api-autonav>=0.3.0,<0.4",
    "mkdocs-click>=0.9.0,<0.10",
    "mkdocs-minify-plugin>=0.8.0,<0.9",
]
types = [
    "types-pytz>=2025.2.0.20250326,<2026",
    "types-click>=7.1.8,<8",
    "types-psutil>=7.0.0.20250401,<8",
    "types-dateparser>=1.2.0.20250408,<2",
    "types-pillow>=10.2.0.20240822,<11",
    "types-colorama>=0.4.15.20240311,<0.5",
    "types-pyyaml>=6.0.12.20250402,<7",
    "types-aiofiles>=24.1.0.20250326,<25",
    "types-influxdb-client>=1.45.0.20241221,<2",
    "types-jinja2>=2.11.9,<3",
]

[tool.uv]
default-groups = ["dev", "test", "docs", "types"]

[tool.hatch.build.targets.sdist]
include = ["tux"]

[tool.hatch.build.targets.wheel]
include = ["tux"]

[tool.ruff]
exclude = [
    ".venv",
    "examples",
    ".archive",
    "typings/**",
    "tests/**",
    ".kiro/**",
    ".audit/**",
]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = ["E501", "N814", "PLR0913", "PLR2004"]
select = [
    "I",     # isort
    "E",     # pycodestyle-error
    "F",     # pyflakes
    "PERF",  # perflint
    "N",     # pep8-naming
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "FURB",  # refurb
    "PL",    # pylint
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "ASYNC", # flake8-async
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "INP",   # flake8-no-pep420
    "RSE",   # flake8-raise
    "ICN",   # flake8-import-conventions
    "RUF",   # ruff
]
unfixable = []

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "lf"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.basedpyright]
defineConstant = { DEBUG = true }
exclude = ["__pypackages__", "_build", "examples", ".archive", "typings/**"]
include = ["src", "tests"]
stubPath = "typings"
pythonPlatform = "Linux"
pythonVersion = "3.13"
typeCheckingMode = "strict"
# venv = ".venv"
# venvPath = "."

[tool.coverage.run]
source = ["tux"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=tux",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    # "-v",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["src"]

[tool.yamlfix]
comments_min_spaces_from_content = 1
explicit_start = false
indent_mapping = 2
indent_sequence = 4
line_length = 80
preserve_quotes = false
sequence_style = "block_style"
