[project]
name = "tux"
version = "0.0.0"
requires-python = ">=3.13.2,<3.14"
description = "Tux is an all in one bot for the All Things Linux discord server."
readme = "README.md"
license = "GPL-3.0-or-later"
authors = [{ name = "All Things Linux", email = "tux@allthingslinux.org" }]

dependencies = [
    "aiocache>=0.12.3",
    "aioconsole>=0.8.1",
    "aiofiles>=24.1.0",
    "asynctempfile>=0.5.0",
    "cairosvg>=2.7.1",
    "dateparser>=1.2.0",
    "discord-py>=2.6.0",
    "influxdb-client>=1.48.0",
    "emojis>=0.7.0",
    "githubkit[auth-app]>=0.12.0",
    "httpx>=0.28.0",
    "jishaku>=2.5.2",
    "loguru>=0.7.2",
    "pillow>=11.3.0",
    "psutil>=7.1.0",
    "pynacl>=1.5.0",
    "python-dotenv>=1.0.1",
    "pytz>=2025.2",
    "pyyaml>=6.0.2",
    "reactionmenu>=3.1.7",
    "rsa>=4.9",
    "sentry-sdk[httpx, loguru]>=2.7.0",
    "audioop-lts>=0.2.2",
    "colorama>=0.4.6",
    "rich>=14.0.0",
    "watchdog>=6.0.0",
    "arrow>=1.3.0",
    "click>=8.1.8",
    "levenshtein>=0.27.1",
    "jinja2>=3.1.6",
    "sqlmodel>=0.0.24",
    "sqlalchemy>=2.0.14",
    "alembic>=1.16.5",
    "alembic-postgresql-enum>=1.8.0",
    "asyncpg>=0.30.0",
    "aiosqlite>=0.21.0",
    "redis>=6.4.0",
    "alembic-utils>=0.8.8",
    "psycopg[binary,pool]>=3.2.9",
    "pydantic>=2.11.7",
    "h2>=4.1.0",
    "docker>=7.0.0",
    "pydantic-settings>=2.10.1",
    "typer>=0.17.3",
    "semver>=3.0.4",
]

[project.urls]
repository = "https://github.com/allthingslinux/tux"

[project.scripts]
settings-doc = "settings_doc.main:app"
cli = "scripts.cli:main"
tux = "scripts.tux:main"
db = "scripts.db:main"
dev = "scripts.dev:main"
test = "scripts.test:main"
docker = "scripts.docker_cli:main"
docs = "scripts.docs:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "basedpyright==1.29.5",
    "ruff>=0.12.4",
    "yamllint>=1.37.1",
    "yamlfix>=1.18.0",
    "settings-doc>=4.3.2",
]
test = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-mock>=3.15.1",
    "pytest-cov>=7.0.0",
    "pytest-sugar>=1.1.1",
    # Temporarily disabled pytest-xdist to prevent py-pglite concurrency issues
    # "pytest-xdist",
    "pytest-randomly>=4.0.1",
    "pytest-timeout>=2.4.0",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=5.1.0",
    "pytest-alembic>=0.12.1",
    "pytest-loguru>=0.4.0",
    "pytest-parallel>=0.1.1",
    "pytest-httpx>=0.35.0",
    "py-pglite[all]>=0.5.3",
]
docs = [
    "mkdocs-material>=9.5.30",
    "mkdocstrings-python>=1.18.2",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-git-committers-plugin-2>=2.5.0",
    "pymdown-extensions>=10.14.3",
    "mkdocstrings>=0.30.1",
    "mkdocs>=1.6.1",
    "griffe>=1.5.6",
    "griffe-typingdoc>=0.2.7",
    "griffe-generics>=1.0.13",
    "griffe-inherited-method-crossrefs>=0.0.1.4",
    "griffe-inherited-docstrings>=1.1.1",
    "mkdocs-api-autonav>=0.4.0",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-typer2>=0.1.6",
    "mkdocs-typer>=0.0.3",
]
types = [
    "types-pytz>=2025.2.0.20250326",
    "types-click>=7.1.8",
    "types-psutil>=7.0.0.20250401",
    "types-dateparser>=1.2.0.20250408",
    "types-pillow>=10.2.0.20240822",
    "types-colorama>=0.4.15.20240311",
    "types-pyyaml>=6.0.12.20250402",
    "types-aiofiles>=24.1.0.20250326",
    "types-influxdb-client>=1.45.0.20241221",
    "types-jinja2>=2.11.9",
    "annotated-types>=0.7.0",
    "asyncpg-stubs>=0.30.2",
]

[tool.uv]
default-groups = ["dev", "test", "docs", "types"]

[tool.hatch.build.targets.sdist]
packages = ["src/tux", "scripts"]

[tool.hatch.build.targets.wheel]
packages = ["src/tux", "scripts"]

[tool.ruff]
exclude = [
    ".venv",
    "examples",
    ".archive",
    "typings/**",
    "tests",
    "tests/**",
    "**/tests/**",
    ".kiro/**",
    ".audit/**",
    "src/tux/database/migrations/versions/**",
    "**/migrations/**",
]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = ["E501", "N814", "PLR0913", "PLR2004", "E402"]
select = [
    "I",     # isort
    "E",     # pycodestyle-error
    "F",     # pyflakes
    "PERF",  # perflint
    "N",     # pep8-naming
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "FURB",  # refurb
    "PL",    # pylint
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "ASYNC", # flake8-async
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "INP",   # flake8-no-pep420
    "RSE",   # flake8-raise
    "ICN",   # flake8-import-conventions
    "RUF",   # ruff
]
unfixable = []

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "lf"
quote-style = "double"

[tool.basedpyright]
defineConstant = { DEBUG = true }
exclude = [
    "__pypackages__",
    "**/__pycache__",
    "_build",
    "examples",
    ".archive",
    "tests/**",
    "src/tux/database/migrations/**",
]
ignore = ["**/tests/**"]
include = ["src", "scripts"]
stubPath = "typings"
pythonPlatform = "Linux"
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = "warning"

[tool.coverage.run]
source = ["src/tux"]
branch = true
parallel = true
relative_files = true
concurrency = ["thread", "multiprocessing"]
sigterm = true
omit = [
    "*/tests/*",
    "*/test_*",
    "conftest.py",
    "*/__pycache__/*",
    ".pytest_cache/*",
    ".ruff_cache/*",
    "htmlcov/*",
    "*/venv/*",
    "*/.venv/*",
    "typings/*",
    "docs/*",
    "scripts/*",
    "assets/*",
    "logs/*",
    "*.md",
    "*.toml",
    "*.lock",
    "*.nix",
    "flake.*",
    "shell.nix",
    "prisma/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = false
sort = "name"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

[tool.coverage.lcov]
output = "lcov.info"

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Default options for all pytest runs
addopts = [
    # Coverage
    "--cov=src/tux",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=json",
    "--cov-report=lcov",
    "--cov-branch",
    # Output formatting
    "--strict-markers",
    "--tb=short",
    "--randomly-seed=last",
    # Verbose logging
    "-v",
    "--color=yes",
    "--durations=10",
    "--capture=no",
    "--log-cli-level=DEBUG",
    "--log-cli-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-cli-date-format=%H:%M:%S",
    "--log-file=logs/pytest.log",
    "--log-file-level=DEBUG",
    "--log-file-format=%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s",
    "--log-file-date-format=%Y-%m-%d %H:%M:%S",
    # Async support
    "--asyncio-mode=auto",
]

# Markers
markers = [
    "unit: Unit tests (uses py-pglite)",
    "integration: Integration tests (uses py-pglite)",
    "slow: Slow tests (>5 seconds)",
    "database: Tests requiring database access",
    "async: Async tests",
]

# Filter warnings
filterwarnings = [
    "ignore::sqlalchemy.exc.SAWarning",
    "ignore::ResourceWarning",
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Minimum version
minversion = "7.0"

# Test timeout (in seconds)
timeout = 300

# AsyncIO configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "function"

# Python path for imports
pythonpath = ["src"]


# Directories to skip during test discovery
norecursedirs = [
    ".git",
    ".venv",
    "venv",
    "node_modules",
    "build",
    "dist",
    "__pycache__",
    ".pytest_cache",
]

# Console output style
console_output_style = "progress"

# Test result logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# JUnit XML output for CI
junit_family = "xunit2"
junit_logging = "no"


# pytest-alembic configuration
[tool.pytest-alembic]
script_location = "src/tux/database/migrations"
version_locations = ["src/tux/database/migrations/versions"]
