---
# Docker Compose configuration for Tux
# Simple self-hosted setup

services:
  tux-postgres:
    container_name: tux-postgres
    hostname: tux-postgres
    image: postgres:15-alpine
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tuxdb}
      POSTGRES_USER: ${POSTGRES_USER:-tuxuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThisToAStrongPassword123!}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - tux_postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

    # Enhanced logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER:-tuxuser} -d ${POSTGRES_DB:-tuxdb} -h localhost
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  tux:
    container_name: tux
    hostname: tux
    image: ${TUX_IMAGE:-ghcr.io/allthingslinux/tux}:${TUX_IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        VERSION: ${VERSION:-dev}
        GIT_SHA: ${GIT_SHA:-}
        BUILD_DATE: ${BUILD_DATE:-}
        DEVCONTAINER: ${DEVCONTAINER:-0}
    volumes:
      - ./config:/app/config:ro
      - ./src/tux/custom_modules:/app/tux/custom_modules:ro
      - ./assets:/app/assets:ro
      # Migration mount - always mounted, controlled by USE_LOCAL_MIGRATIONS env var
      - ./src/tux/database/migrations:/app/tux/database/migrations:ro
      - tux_cache:/app/.cache
      - tux_temp:/app/temp
      - tux_user_home:/home/nonroot
    env_file:
      - .env
    environment:
      TUX_VERSION: ${VERSION:-dev}
      # Development-specific overrides
      DEBUG: ${DEBUG:-false}
      # Migration control
      USE_LOCAL_MIGRATIONS: ${USE_LOCAL_MIGRATIONS:-true}
      FORCE_MIGRATE: ${FORCE_MIGRATE:-false}
      # Startup configuration
      MAX_STARTUP_ATTEMPTS: ${MAX_STARTUP_ATTEMPTS:-3}
      STARTUP_DELAY: ${STARTUP_DELAY:-5}
      # Database configuration for Docker
      POSTGRES_HOST: tux-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-tuxdb}
      POSTGRES_USER: ${POSTGRES_USER:-tuxuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThisToAStrongPassword123!}
    restart: unless-stopped
    depends_on:
      tux-postgres:
        condition: service_healthy
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - |
          import sys
          try:
              import tux.shared.config.env
              # Additional check: ensure bot token is configured
              from tux.shared.config.env import CONFIG
              if not CONFIG.bot_token:
                  print("Bot token not configured", file=sys.stderr)
                  sys.exit(1)
              print("Health check passed")
          except Exception as e:
              print(f"Health check failed: {e}", file=sys.stderr)
              sys.exit(1)
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Production: Stop dependent services when this service fails
    stop_grace_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100m
      - /var/tmp:size=50m
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: '3'

    # Development mode with hot reload (only active when using --watch)
    develop:
      watch:
        # Sync Python source code changes for hot reload
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - __pycache__/
            - "*.pyc"
            - "*.pyo"
            - "*.pyd"
            - .pytest_cache/
            - .mypy_cache/
            - .coverage
        # Sync configuration changes
        - action: sync
          path: ./config
          target: /app/config
        # Sync custom modules
        - action: sync
          path: ./src/tux/custom_modules
          target: /app/tux/custom_modules
        # Sync assets
        - action: sync
          path: ./assets
          target: /app/assets
        # Rebuild when dependencies change
        - action: rebuild
          path: pyproject.toml
        - action: rebuild
          path: uv.lock
        # Restart when environment or Docker config changes
        - action: sync+restart
          path: .env
          target: /app/.env
        - action: sync+restart
          path: docker-compose.yml
          target: /app/docker-compose.yml

  tux-adminer:
    image: adminer:latest
    container_name: tux-adminer
    hostname: tux-adminer
    restart: "no"
    depends_on:
      tux-postgres:
        condition: service_healthy

    # Port mapping
    ports:
      - '${ADMINER_PORT:-8081}:8080'

    # Adminer configuration
    environment:
      ADMINER_DEFAULT_DRIVER: "pgsql"
      ADMINER_DEFAULT_SERVER: "tux-postgres"
      ADMINER_DEFAULT_DB: ${POSTGRES_DB:-tuxdb}
      ADMINER_DEFAULT_USERNAME: ${POSTGRES_USER:-tuxuser}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThisToAStrongPassword123!}
      ADMINER_AUTO_LOGIN: "${ADMINER_AUTO_LOGIN:-true}"
      ADMINER_PLUGINS: "backward-keys tables-filter dump-date dump-json dump-xml dump-zip edit-calendar enum-option foreign-system json-column pretty-json-column table-indexes-structure table-structure"

    configs:
      - source: adminer-index.php
        target: /var/www/html/index.php
      - source: adminer-theme.css
        target: /var/www/html/adminer.css

    # Enhanced logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

    # Security configuration
    security_opt:
      - no-new-privileges:true

volumes:
  # Persistent data volumes
  tux_cache:
    driver: local
  tux_temp:
    driver: local
  tux_user_home:
    driver: local
  tux_postgres_data:
    driver: local

configs:
  adminer-index.php:
    file: ./docker/adminer/index.php
  adminer-theme.css:
    file: ./docker/adminer/adminer-theme.css
