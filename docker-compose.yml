# ==============================================================================
# TUX DISCORD BOT - PRODUCTION DOCKER COMPOSE
# ==============================================================================
#
# This Docker Compose file defines the production deployment configuration for
# the Tux Discord Bot. It is optimized for stability, security, and resource
# efficiency in production environments.
#
# ENVIRONMENT:
# ------------
# Target: Production deployment (servers, cloud platforms, etc.)
# Purpose: Stable, secure, resource-limited bot execution
# Features: Health monitoring, security hardening, resource limits
#
# USAGE:
# ------
# RECOMMENDED (using tux CLI):
#   poetry run tux --prod docker up -d     # Start production bot
#   poetry run tux --prod docker logs -f   # View logs
#   poetry run tux --prod docker down      # Stop bot
#
# ALTERNATIVE (direct docker-compose):
#   docker-compose up -d                    # Start production bot
#   docker-compose logs -f tux              # View logs
#   docker-compose down                     # Stop bot
#   docker-compose up -d --build            # Update bot (rebuild and restart)
#
# SECURITY FEATURES:
# ------------------
# - Read-only root filesystem with tmpfs for writable areas
# - No new privileges security option
# - Non-root user execution (handled in Dockerfile)
# - Resource limits to prevent resource exhaustion
# - Structured logging for security monitoring
#
# RELIABILITY FEATURES:
# ---------------------
# - Health checks for automatic restart on failure
# - Restart policy to handle crashes
# - Persistent volumes for cache and temporary data
# - Resource reservations to ensure minimum resources
#
# MONITORING FEATURES:
# --------------------
# - Container health checks
# - Structured JSON logging
# - Resource limit enforcement
# - Log rotation to prevent disk space issues
#
# ==============================================================================

---
# ==============================================================================
# SERVICES CONFIGURATION
# ==============================================================================

services:
  # ============================================================================
  # TUX BOT SERVICE - Main Application Container
  # ============================================================================
  # Purpose: Runs the Tux Discord bot in production mode
  # Security: Hardened with read-only filesystem and security options
  # Monitoring: Health checks and structured logging enabled
  # ============================================================================

  tux:
    # CONTAINER IDENTIFICATION
    # Fixed name for easier management and log identification
    # Allows direct docker commands: docker logs tux, docker exec tux sh
    container_name: tux

    # IMAGE CONFIGURATION
    # Uses pre-built image from GitHub Container Registry for faster deployment
    # Falls back to local build if image is not available in registry
    image: ghcr.io/allthingslinux/tux:latest

    # BUILD CONFIGURATION
    # Local build fallback when registry image is unavailable
    # Uses production target for optimized, minimal image
    build:
      # Build context includes entire project directory
      context: .
      # Dockerfile location (can be omitted if using default)
      dockerfile: Dockerfile
      # Target production stage for minimal, secure image
      target: production

    # VOLUME MOUNTS
    # Strategic mounting for configuration, code, and persistent data
    volumes:
      # CONFIGURATION MOUNT (Read-Only)
      # Bot configuration files - mounted read-only for security
      # Changes require container restart to take effect
      - ./config:/app/config:ro

      # EXTENSIONS MOUNT (Read-Only)
      # Bot extensions/plugins - mounted read-only for security
      # Allows hot-reloading of extensions without full rebuild
      - ./tux/extensions:/app/tux/extensions:ro

      # ASSETS MOUNT (Read-Only)
      # Static assets like images, sounds, etc. - read-only for security
      # Shared between development and production for consistency
      - ./assets:/app/assets:ro

      # CACHE VOLUME (Read-Write, Persistent)
      # Named volume for bot cache data (user data, API responses, etc.)
      # Persists across container restarts for better performance
      - tux_cache:/app/.cache

      # TEMPORARY FILES VOLUME (Read-Write, Persistent)
      # Named volume for temporary files that need persistence
      # Separate from system /tmp for better control and persistence
      - tux_temp:/app/temp

      # USER HOME VOLUME (Read-Write, Persistent)
      # Named volume for all user cache/config directories
      # Prevents read-only filesystem errors for all CLI operations
      - tux_user_home:/home/nonroot

    # ENVIRONMENT CONFIGURATION
    # Environment variables loaded from .env file
    # Contains sensitive data like bot tokens, API keys, database URLs
    # SECURITY: .env file should be in .gitignore and properly secured
    env_file: [".env"]

    # RESTART POLICY
    # Automatically restart container unless explicitly stopped
    # Handles bot crashes, system reboots, and temporary failures
    # Options: no, always, on-failure, unless-stopped
    restart: unless-stopped

    # HEALTH CHECK CONFIGURATION
    # Monitors container health for automatic restart and load balancer integration
    # More sophisticated than Dockerfile health check for production monitoring
    healthcheck:
      # Simple Python import test to verify bot can start
      # Lighter than full bot initialization for faster health checks
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]

      # Health check timing configuration
      interval: 30s # Check every 30 seconds
      timeout: 10s # Allow 10 seconds for check to complete
      retries: 3 # Mark unhealthy after 3 consecutive failures
      start_period: 40s # Wait 40 seconds before first check (startup time)

    # RESOURCE MANAGEMENT
    # Production resource limits and reservations for stable operation
    # Prevents bot from consuming excessive resources and affecting other services
    deploy:
      resources:
        # RESOURCE LIMITS (Hard Caps)
        # Container will be killed if it exceeds these limits
        limits:
          memory: 512M # Maximum 512MB RAM usage
          cpus: "0.5" # Maximum 0.5 CPU cores (50% of one core)

        # RESOURCE RESERVATIONS (Guaranteed Resources)
        # Docker ensures these resources are always available to the container
        reservations:
          memory: 256M # Guaranteed 256MB RAM
          cpus: "0.25" # Guaranteed 0.25 CPU cores (25% of one core)

    # SECURITY HARDENING
    # Additional security options for production deployment
    security_opt:
      # Prevents container from gaining new privileges during execution
      # Protects against privilege escalation attacks
      - no-new-privileges:true

    # READ-ONLY FILESYSTEM
    # Makes the root filesystem read-only for enhanced security
    # Prevents malicious code from modifying system files
    # Writable areas provided via tmpfs mounts below
    read_only: true

    # TEMPORARY FILESYSTEM MOUNTS
    # Provides writable areas for system operations while maintaining security
    # These are ephemeral and cleared on container restart
    tmpfs:
      # Standard temporary directory with size limit
      - /tmp:size=100m

      # Variable temporary directory with smaller size limit
      - /var/tmp:size=50m

    # LOGGING CONFIGURATION
    # Structured logging for production monitoring and debugging
    # Prevents log files from consuming excessive disk space
    logging:
      # JSON structured logging for better parsing by log aggregators
      driver: "json-file"

      # Log rotation configuration to prevent disk space issues
      options:
        max-size: "10m" # Rotate logs when they reach 10MB
        max-file: "3" # Keep maximum 3 rotated log files

# ==============================================================================
# VOLUMES CONFIGURATION
# ==============================================================================
# Named volumes for persistent data that survives container restarts
# These volumes are managed by Docker and provide better performance
# and portability compared to bind mounts for application data
# ==============================================================================

volumes:
  # BOT CACHE VOLUME
  # Stores bot cache data for improved performance across restarts
  # Contains: Discord API cache, user data cache, command cache, etc.
  # Persistence: Survives container restarts and updates
  # Size: Grows based on bot usage, monitor in production
  tux_cache:
    driver: local # Local Docker volume driver (default)

  # TEMPORARY FILES VOLUME
  # Stores temporary files that need persistence across container restarts
  # Contains: Downloaded files, processing artifacts, session data, etc.
  # Persistence: Survives container restarts but can be cleared if needed
  # Size: Should be monitored and cleaned periodically in production
  tux_temp:
    driver: local # Local Docker volume driver (default)

  # USER HOME VOLUME
  # Stores all user cache and config directories
  # Contains: .cache (Prisma), .npm, .config, and other CLI tool data
  # Persistence: Critical for avoiding re-downloads and CLI performance
  # Size: Relatively small but covers all user-space tool requirements
  tux_user_home:
    driver: local # Local Docker volume driver (default)

# ==============================================================================
# PRODUCTION DEPLOYMENT BEST PRACTICES IMPLEMENTED
# ==============================================================================
#
# 1. SECURITY HARDENING:
#    - Read-only root filesystem with tmpfs for writable areas
#    - No new privileges security option
#    - Non-root user execution (configured in Dockerfile)
#    - Read-only mounts for configuration and code
#
# 2. RESOURCE MANAGEMENT:
#    - Memory and CPU limits to prevent resource exhaustion
#    - Resource reservations to ensure minimum performance
#    - Restart policy for automatic recovery
#
# 3. MONITORING & OBSERVABILITY:
#    - Health checks for container health monitoring
#    - Structured JSON logging for log aggregation
#    - Log rotation to prevent disk space issues
#    - Fixed container name for easier management
#
# 4. DATA PERSISTENCE:
#    - Named volumes for cache and temporary data
#    - Proper separation of read-only and read-write data
#    - Volume organization for backup and maintenance
#
# 5. OPERATIONAL EXCELLENCE:
#    - Clear restart policy for reliability
#    - Environment file separation for security
#    - Build fallback for deployment flexibility
#    - Registry image for faster deployments
#
# ==============================================================================
#
# TUX CLI COMMANDS (Recommended):
# --------------------------------
# Build:     poetry run tux --prod docker build
# Start:     poetry run tux --prod docker up [-d|--build]
# Logs:      poetry run tux --prod docker logs -f
# Shell:     poetry run tux --prod docker shell
# Stop:      poetry run tux --prod docker down
# Database:  poetry run tux --prod docker exec tux "tux db <command>"
#
# PRODUCTION COMMANDS:
# --------------------
# Production deployment:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f tux
#
# Update bot:
#   docker-compose pull && docker-compose up -d
#
# Rebuild from source:
#   docker-compose up -d --build
#
# Stop bot:
#   docker-compose down
#
# Stop and remove volumes (WARNING: destroys cache):
#   docker-compose down -v
#
# ==============================================================================
