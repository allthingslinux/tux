---
description: 
globs: tux/cli/**,README.md,DEVELOPER.md,pyproject.toml,docs/**
alwaysApply: false
---
# Tux CLI Usage

This rule describes the custom `tux` CLI tool used for managing the application.

## Invocation

Commands are run via Poetry: `poetry run tux <options> <command-group> <sub-command>`

## Environment Flags

- **Development (Default):** Commands run in development mode by default (using `.env` variables like `DEV_BOT_TOKEN`, `DEV_DATABASE_URL`). No flag or the `--dev` flag can be used.
- **Production:** To target production resources, **must** use the global `--prod` flag immediately after `tux`: `poetry run tux --prod ...`

See [tux/utils/env.py](mdc:tux/utils/env.py) for environment logic.

## Command Groups

- **`bot`**: Commands related to running the bot.
  - `start`: Starts the bot (uses hot-reloading in dev mode).
- **`db`**: Commands for database management (interacts with Prisma).
  - `push`: Pushes schema changes directly (dev only).
  - `generate`: Generates the Prisma client.
  - `migrate`: Creates and applies database migrations.
  - `pull`: Updates `schema.prisma` from the database.
  - `reset`: Drops and recreates the database (destructive).
- **`dev`**: Commands for development quality checks.
  - `lint`: Runs Ruff linter.
  - `lint-fix`: Runs Ruff linter and applies fixes.
  - `format`: Runs Ruff formatter.
  - `type-check`: Runs Pyright type checker.
  - `pre-commit`: Runs all configured pre-commit hooks.
- **`docker`**: Commands for managing the Docker environment.
  - `build`: Builds Docker images.
  - `up`: Starts Docker services (uses `docker-compose.dev.yml` overrides in dev mode).
  - `down`: Stops Docker services.
  - `logs`: Shows container logs.
  - `exec`: Executes a command inside a running container.

Refer to [DEVELOPER.md](mdc:DEVELOPER.md) for detailed examples and explanations.
