---
description: 
globs: 
alwaysApply: false
---
# Extensions System

This rule describes how to add custom functionality to Tux using the extensions system.

## Overview

The extensions system allows adding custom commands and features without modifying the core bot code. This is achieved by placing standard `discord.py` cog files within the `tux/extensions/` directory.

- **Location:** Place your custom cog Python files inside [tux/extensions/](mdc:tux/extensions).
- **Discovery:** The bot automatically scans this directory (including subdirectories) and loads any valid cogs found.
- **Submodules:** Subdirectories can be used, enabling the use of Git submodules to manage extensions.

## How to Add an Extension

1.  Create a standard Python file containing a `discord.py` Cog class.
2.  Ensure the cog has a `setup(bot)` function at the module level.
3.  Place the file inside the `tux/extensions/` directory or a subdirectory within it.
4.  The bot's [Cog Loader](mdc:tux/cog_loader.py) will automatically load it on startup or reload.

## Limitations

As noted in the [Extensions README](mdc:tux/extensions/README.md):

-   **Category:** All commands from extensions currently appear under a single "Extensions" category in the help command.
-   **Database Schema:** Extensions cannot currently define or modify the database schema managed by Prisma. Database interactions are limited to the existing schema and controllers.
-   **Dependencies:** Extensions cannot add new Python package dependencies; they must use packages already listed in [pyproject.toml](mdc:pyproject.toml).
