---
description:
globs: docker-compose.yml,docker-compose.dev.yml,Dockerfile,README.md,.github/workflows/docker-image.yml,tux/cli/docker.py,.dockerignore
alwaysApply: false
---
# Docker Development Environment

This rule describes the setup and usage of the optional Docker-based development environment.

## Overview

Docker provides a containerized environment for consistency. It uses Docker Compose with overrides for development.

- **Base Configuration:** [docker-compose.yml](mdc:docker-compose.yml)
- **Development Overrides:** [docker-compose.dev.yml](mdc:docker-compose.dev.yml)
- **Dockerfile:** [Dockerfile](mdc:Dockerfile) (multi-stage)
- **Github Action:** [docker-image.yml](mdc:.github/workflows/docker-image.yml)

## Workflow

Commands are run using the `tux` CLI's `docker` group (ensure you are in development mode - default or `--dev`).

1.  **Build Images (Initial/Dockerfile Changes):**
    ```bash
    poetry run tux --dev docker build
    ```
2.  **Start Services:**
    ```bash
    # Starts containers using dev overrides
    poetry run tux --dev docker up

    # Rebuild images before starting
    poetry run tux --dev docker up --build
    ```
    - Uses `docker-compose.dev.yml`.
    - Mounts the codebase using `develop: watch:` for live code syncing (replaces Python hot-reloading).
    - Runs `python -m tux --dev bot start` inside the `app` container.

3.  **Stop Services:**
    ```bash
    poetry run tux --dev docker down
    ```

## Interacting with Containers

Use `poetry run tux --dev docker exec app <command>` to run commands inside the `app` container.

- **Logs:** `poetry run tux --dev docker logs -f`
- **Shell:** `poetry run tux --dev docker exec app bash`
- **Database Commands:** Must be run *inside* the container.
  ```bash
  # Example: Push schema
  poetry run tux --dev docker exec app poetry run tux --dev db push
  # Example: Create migration
  poetry run tux --dev docker exec app poetry run tux --dev db migrate --name <name>
  ```
- **Linting/Formatting/Type Checking:** Must be run *inside* the container.
  ```bash
  poetry run tux --dev docker exec app poetry run tux dev lint
  poetry run tux --dev docker exec app poetry run tux dev format
  # etc.
  ```

Refer to the Docker section in [DEVELOPER.md](mdc:DEVELOPER.md) for more context.
