---
description: 
globs: tux/cli/**,README.md,DEVELOPER.md,docs/**,pyproject.toml,.env
alwaysApply: false
---
# Development Environment Setup

This rule outlines the basic steps to set up a local development environment for Tux.

## Prerequisites

- Git
- Python 3.13+ (Managed via `mise`, `pyenv`, `asdf`, or system install)
- Poetry (1.2+ recommended)
- A PostgreSQL database

## Setup Steps

1.  **Clone:** `git clone https://github.com/allthingslinux/tux && cd tux`
2.  **Select Python Version:** Ensure Poetry uses the correct Python version (e.g., `poetry env use 3.13.2`).
3.  **Install Dependencies:** `poetry install` installs project and dev dependencies.
4.  **Install Pre-commit Hooks:** `poetry run pre-commit install` sets up Git hooks for quality checks.
5.  **Configure Environment Variables:** Copy `.env.example` to `.env` (`cp .env.example .env`) and fill in required values like `DEV_BOT_TOKEN` and `DEV_DATABASE_URL`. See [.env.example](mdc:.env.example).
6.  **Configure Bot Settings:** Copy `config/settings.yml.example` to `config/settings.yml` (`cp config/settings.yml.example config/settings.yml`) and customize settings, ensuring your Discord User ID is added to the owner list. See [config/settings.yml.example](mdc:config/settings.yml.example).
7.  **Initialize Database:** Run `poetry run tux --dev db push` to apply the schema to your development database and generate the Prisma client.

Refer to [DEVELOPER.md](mdc:DEVELOPER.md) for more comprehensive details.
